name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-and-test:
    runs-on: windows-latest

    env:
      SOLUTION: FlekoFramework/FlekoFramework.sln
      CONFIGURATION: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages (solution-local packages/)
        uses: actions/cache@v4
        with:
          path: FlekoFramework/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore $env:SOLUTION
        shell: pwsh

      - name: Setup MSBuild (VS 2022)
        uses: microsoft/setup-msbuild@v2
      
      - name: Build solution
        run: msbuild $env:SOLUTION /p:Configuration=$env:CONFIGURATION /m /verbosity:minimal
        shell: pwsh

      - name: Locate VSTest.console.exe
        id: locate-vstest
        shell: pwsh
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
            -latest -products * `
            -requires Microsoft.Component.MSBuild `
            -property installationPath
          $candidates = @(
            (Join-Path $vsPath "Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"),
            (Join-Path $vsPath "Common7\IDE\Extensions\TestPlatform\vstest.console.exe")
          )
          foreach ($c in $candidates) {
            if (Test-Path $c) {
              "VSTEST_PATH=$c" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              break
            }
          }

      - name: Discover test assemblies
        id: find-tests
        shell: pwsh
        run: |
          $roots = @(
            "FlekoFramework/UnitTests/bin/Release",
            "FlekoFramework/**/bin/Release"
          )
          $dlls = @()
          foreach ($r in $roots) {
            $dlls += Get-ChildItem -Path $r -Recurse -ErrorAction SilentlyContinue -Include *.dll
          }
          # Берём только типичные имена тестовых сборок
          $tests = $dlls | Where-Object {
            $_.FullName -match '\\(Test|Tests|UnitTests)\\|\\(Test|Tests|UnitTests)\.dll$' -or
            $_.Name -match '(^|\.)(Test|Tests|UnitTests)\.dll$'
          } | Select-Object -ExpandProperty FullName -Unique
          if (-not $tests) {
            Write-Error "No test DLLs found under bin/Release."
          }
          $list = [string]::Join(";", $tests)
          "DLLS=$list" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Found test DLLs:`n - " + ($tests -join "`n - ")

      - name: Run unit tests (MSTest)
        shell: pwsh
        run: |
          $vstest = "${{ steps.locate-vstest.outputs.VSTEST_PATH }}"
          if (-not $vstest) { throw "vstest.console.exe not found" }
          $dlls = "${{ steps.find-tests.outputs.DLLS }}".Split(';') | Where-Object { $_ }
          & $vstest @dlls /Platform:x64 /logger:trx

      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: '**/*.trx'
