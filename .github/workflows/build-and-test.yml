name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build-and-test:
    runs-on: windows-latest

    env:
      SOLUTION: FlekoFramework/FlekoFramework.sln
      CONFIGURATION: Release
      TEST_ASSEMBLY: FlekoFramework/UnitTests/bin/Release/Flekosoft.UnitTests.dll
      NUGET_PACKAGES_DIR: FlekoFramework/packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages (solution-local packages/)
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES_DIR }}
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore $env:SOLUTION
        shell: pwsh

      - name: Setup MSBuild (VS 2022)
        uses: microsoft/setup-msbuild@v2

      - name: Ensure .NET Framework 4.6.1 Dev Pack
        shell: pwsh
        run: |
          $tfmPath = "${env:ProgramFiles(x86)}\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6.1"
          if (-not (Test-Path $tfmPath)) {
            Write-Host "v4.6.1 reference assemblies not found. Trying winget..."
            $winget = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"
            if (-not (Test-Path $winget)) { $winget = "winget" }
            try {
              & $winget install Microsoft.DotNet.Framework.DeveloperPack_4 -v 4.6.1 -e --silent --accept-package-agreements --accept-source-agreements
            } catch {
              Write-Warning "winget install failed, will try direct offline installer..."
            }
          }

          if (-not (Test-Path $tfmPath)) {
            $url = "https://download.microsoft.com/download/F/1/D/F1DEB8DB-D277-4EF9-9F48-3A65D4D8F965/NDP461-DevPack-KB3105179-ENU.exe"
            $exe = "$env:RUNNER_TEMP\NDP461-DevPack-KB3105179-ENU.exe"
            Write-Host "Downloading 4.6.1 Dev Pack from $url ..."
            Invoke-WebRequest -Uri $url -OutFile $exe
            Write-Host "Installing 4.6.1 Dev Pack silently..."
            Start-Process -FilePath $exe -ArgumentList "/q /norestart" -Wait -NoNewWindow
          }

          if (-not (Test-Path $tfmPath)) {
            throw "Failed to provision .NET Framework 4.6.1 Developer Pack (reference assemblies still missing at $tfmPath)."
          } else {
            Write-Host "4.6.1 Developer Pack is present."
          }

      - name: Build solution
        run: msbuild $env:SOLUTION /p:Configuration=$env:CONFIGURATION /m /verbosity:minimal
        shell: pwsh

      - name: Locate VSTest.console.exe
        id: locate-vstest
        shell: pwsh
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
            -latest -products * `
            -requires Microsoft.Component.MSBuild `
            -property installationPath
          $candidates = @(
            (Join-Path $vsPath "Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"),
            (Join-Path $vsPath "Common7\IDE\Extensions\TestPlatform\vstest.console.exe")
          )
          foreach ($c in $candidates) {
            if (Test-Path $c) {
              "VSTEST_PATH=$c" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              break
            }
          }

      - name: Run unit tests (MSTest)
        shell: pwsh
        run: |
          $vstest = "${{ steps.locate-vstest.outputs.VSTEST_PATH }}"
          if (-not (Test-Path $env:TEST_ASSEMBLY)) {
            Write-Error "Test assembly not found at $env:TEST_ASSEMBLY. Check paths and configuration."
          }
          & $vstest "$env:TEST_ASSEMBLY" /Platform:x64 /logger:trx

      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: |
            **/*.trx
